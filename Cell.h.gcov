        -:    0:Source:Cell.h
        -:    0:Graph:TestLife.gcno
        -:    0:Data:TestLife.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef CELL_H
        -:    2:#define CELL_H
        -:    3:
        -:    4:#include <vector>
        -:    5:#include <algorithm>
        -:    6:#include "FredkinCell.h"
        -:    7:#include "ConwayCell.h"
        -:    8:
        -:    9:class Cell {
        -:   10:	public:
        -:   11:		void step(int);
        -:   12:		bool isAlive();
        -:   13:		void print();
        -:   14:		int getCellType();
        -:   15:		void flip();
        -:   16:		void read(char);
function _ZN4CellC2Ev called 35 returned 100% blocks executed 100%
       35:   17:		Cell() {
       35:   18:			cell = nullptr;
       35:   19:		};
function _ZN4CellD2Ev called 35 returned 100% blocks executed 100%
       35:   20:		~Cell() {
       35:   21:			delete cell;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       35:   22:		};
        -:   23:		Cell(const Cell& rhs) {
        -:   24:			if (!rhs.cell) {
        -:   25:				cell = 0;
        -:   26:			} else {
        -:   27:				cell = rhs.cell->clone();
        -:   28:			}
        -:   29:		};
        -:   30:		Cell& operator = (Cell rhs) {
        -:   31:			std::swap(cell, rhs.cell);
        -:   32:			return *this;
        -:   33:		};
        -:   34:	private:
        -:   35:		AbstractCell* cell;
        -:   36:};
        -:   37:#endif
