        -:    0:Source:Life.h
        -:    0:Graph:TestLife.gcno
        -:    0:Data:TestLife.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef LIFE_H
        -:    2:#define LIFE_H
        -:    3:
        -:    4:#include <vector>
        -:    5:#include "gtest/gtest_prod.h"
        -:    6:#include "Cell.h"
        -:    7:#include "ConwayCell.h"
        -:    8:#include "FredkinCell.h"
        -:    9:
        -:   10:template<typename T>
        -:   11:class Life {
        -:   12:	public:
function _ZN4LifeI11FredkinCellEC2Eii called 5 returned 100% blocks executed 73%
function _ZN4LifeI4CellEC2Eii called 12 returned 100% blocks executed 73%
function _ZN4LifeI10ConwayCellEC2Eii called 13 returned 100% blocks executed 73%
       30:   13:		Life(int width, int height) {
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 returned 100%
call    5 never executed
       30:   14:			this->width = width;
       30:   15:			this->height = height;
       30:   16:			generation = 0;
       30:   17:			cells = std::vector<T*>(width * height);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 never executed
       30:   18:		};
function _ZN4LifeI11FredkinCellED2Ev called 5 returned 100% blocks executed 100%
function _ZN4LifeI4CellED2Ev called 12 returned 100% blocks executed 100%
function _ZN4LifeI10ConwayCellED2Ev called 13 returned 100% blocks executed 100%
       30:   19:		~Life() {
     2110:   20:			for (int i = 0; i < cells.size(); i++) {
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
call    3 returned 100%
branch  4 taken 80%
branch  5 taken 20% (fallthrough)
call    6 returned 100%
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
     2080:   21:				delete cells.at(i);
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 60% (fallthrough)
branch  6 taken 40%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
call   12 returned 100%
        -:   22:			}
       30:   23:		};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN4LifeI10ConwayCellE4stepEv called 13 returned 100% blocks executed 100%
       13:   24:		void step() {
       65:   25:			for (int i = 0; i < width * height; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       52:   26:				cells.at(i)->step(getNeighborCount(i));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   27:			}
       65:   28:			for (int i = 0; i < width * height; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       52:   29:				cells.at(i)->flip();
call    0 returned 100%
call    1 returned 100%
        -:   30:			}
       13:   31:			generation++;
       13:   32:		};
function _ZN4LifeI11FredkinCellE9readInputEci called 14 returned 100% blocks executed 86%
function _ZN4LifeI4CellE9readInputEci called 29 returned 100% blocks executed 100%
function _ZN4LifeI10ConwayCellE9readInputEci called 26 returned 100% blocks executed 86%
       69:   33:		void readInput(char in, int position) {
       69:   34:			T* type = new T();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 never executed
       69:   35:			type->read(in);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       69:   36:			cells[position] = type;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       69:   37:		};
        -:   38:		void print() {
        -:   39:			std::cout << "Generation = " << generation << ", Population = " << getPopulation() << ".";
        -:   40:			for (int i = 0; i < width * height; i++) {
        -:   41:				if (i % width == 0) {
        -:   42:					std::cout << std::endl;
        -:   43:				}
        -:   44:				cells.at(i)->print();
        -:   45:			}
        -:   46:			std::cout << std::endl;
        -:   47:		};
function _ZNK4LifeI4CellE13getPopulationEv called 1 returned 100% blocks executed 100%
function _ZNK4LifeI11FredkinCellE13getPopulationEv called 3 returned 100% blocks executed 100%
function _ZNK4LifeI10ConwayCellE13getPopulationEv called 3 returned 100% blocks executed 100%
        7:   48:		int getPopulation() const {
        7:   49:			int population = 0;
       35:   50:			for (int i = 0; i < width * height; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
branch  5 taken 20% (fallthrough)
       28:   51:				if (cells.at(i)->isAlive()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 42% (fallthrough)
branch  7 taken 58%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
       13:   52:					population++;
        -:   53:				}
        -:   54:			}
        7:   55:			return population;
        -:   56:		};
function _ZNK4LifeI10ConwayCellE16getNeighborCountEi called 52 returned 100% blocks executed 76%
function _ZNK4LifeI4CellE16getNeighborCountEi called 2 returned 100% blocks executed 100%
       54:   57:		int getNeighborCount(int position) const {
       54:   58:			int cellX = position % width;
       54:   59:			int cellY = position / width;
       54:   60:			int neighbors = 0;
       54:   61:			int checkX = 0;
       54:   62:			int checkY = 0;
      486:   63:			for (int i = 0; i < 8; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
branch  3 taken 11% (fallthrough)
      432:   64:				if (cells.at(position)->getCellType() == AbstractCell::FREDKIN) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        8:   65:					if (i == 0 || i == 2 || i == 5 || i == 7) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 88% (fallthrough)
branch  9 taken 13%
branch 10 taken 86% (fallthrough)
branch 11 taken 14%
branch 12 taken 83% (fallthrough)
branch 13 taken 17%
branch 14 taken 20% (fallthrough)
branch 15 taken 80%
        4:   66:						continue;
        -:   67:					}
        -:   68:				}
      428:   69:				if (i < 3) {
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
      160:   70:					checkX = cellX + i - 1;
      160:   71:					checkY = cellY - 1;
      268:   72:				} else if (i < 5) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
      108:   73:					checkX = cellX + (i * 2 - 7);
      108:   74:					checkY = cellY;
        -:   75:				} else {
      160:   76:					checkX = cellX + i - 6;
      160:   77:					checkY = cellY + 1;
        -:   78:				}
      589:   79:				if (checkX >= 0 && checkX < width && checkY >= 0 && checkY < height
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
branch  4 taken 80% (fallthrough)
branch  5 taken 20%
branch  6 taken 75% (fallthrough)
branch  7 taken 25%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 92% (fallthrough)
branch 13 taken 8%
branch 14 taken 73% (fallthrough)
branch 15 taken 27%
branch 16 taken 88% (fallthrough)
branch 17 taken 13%
branch 18 taken 71% (fallthrough)
branch 19 taken 29%
branch 20 taken 20% (fallthrough)
branch 21 taken 80%
branch 22 taken 8% (fallthrough)
branch 23 taken 92%
      161:   80:						&& cells.at(checkX + checkY * width)->isAlive()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   81:					neighbors++;
        -:   82:				}
        -:   83:			}
       54:   84:			return neighbors;
        -:   85:		};
function _ZN4LifeI11FredkinCellE2atEi called 4 returned 100% blocks executed 100%
function _ZN4LifeI4CellE2atEi called 2 returned 100% blocks executed 100%
function _ZN4LifeI10ConwayCellE2atEi called 4 returned 100% blocks executed 100%
       10:   86:		T* at(int index) {
       10:   87:			return cells.at(index);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   88:		};
        -:   89:        T* at (int index) const {
        -:   90:            return const_cast<Life*>(this)->at(index);
        -:   91:        };
function _ZN4LifeI4CellE5beginEv called 6 returned 100% blocks executed 100%
        6:   92:		T** begin() {
        6:   93:			return cells.data();
call    0 returned 100%
        -:   94:		};
function _ZNK4LifeI4CellE5beginEv called 3 returned 100% blocks executed 100%
        3:   95:        T** begin () const {
        3:   96:            return const_cast<Life*>(this)->begin();
call    0 returned 100%
        -:   97:        };
function _ZN4LifeI4CellE3endEv called 4 returned 100% blocks executed 100%
        4:   98:		T** end() {
        4:   99:			return cells.data() + cells.size();
call    0 returned 100%
call    1 returned 100%
        -:  100:		};
function _ZNK4LifeI4CellE3endEv called 2 returned 100% blocks executed 100%
        2:  101:        T** end () const {
        2:  102:            return const_cast<Life*>(this)->end();
call    0 returned 100%
        -:  103:        };
        -:  104:	private:
        -:  105:		FRIEND_TEST(LifeFixture, initLife1);
        -:  106:		FRIEND_TEST(LifeFixture, initLife2);
        -:  107:		FRIEND_TEST(LifeFixture, initLife3);
        -:  108:		FRIEND_TEST(LifeFixture, initLife4);
        -:  109:		int width;
        -:  110:		FRIEND_TEST(LifeFixture, initLife1);
        -:  111:		FRIEND_TEST(LifeFixture, initLife2);
        -:  112:		FRIEND_TEST(LifeFixture, initLife3);
        -:  113:		FRIEND_TEST(LifeFixture, initLife4);
        -:  114:		int height;
        -:  115:		FRIEND_TEST(LifeFixture, initLife5);
        -:  116:		FRIEND_TEST(LifeFixture, stepLife1);
        -:  117:		FRIEND_TEST(LifeFixture, stepLife2);
        -:  118:		FRIEND_TEST(LifeFixture, stepLife3);
        -:  119:		int generation;
        -:  120:		FRIEND_TEST(LifeFixture, iterator1);
        -:  121:		FRIEND_TEST(LifeFixture, iterator2);
        -:  122:		FRIEND_TEST(LifeFixture, iterator3);
        -:  123:		FRIEND_TEST(LifeFixture, iterator4);
        -:  124:		FRIEND_TEST(LifeFixture, iterator5);
        -:  125:		FRIEND_TEST(LifeFixture, iterator6);
        -:  126:		FRIEND_TEST(LifeFixture, iterator7);
        -:  127:		FRIEND_TEST(LifeFixture, iterator8);
        -:  128:		std::vector<T*> cells;
        -:  129:};
        -:  130:#endif
